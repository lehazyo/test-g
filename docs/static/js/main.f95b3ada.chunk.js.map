{"version":3,"sources":["mobx/aquarium-store.ts","components/relief-input/relief-input.tsx","components/squares-graph/squares-graph.tsx","components/squares-container/squares-container.tsx","components/utils/canvas-size-calc.ts","components/aquarium/aquarium.tsx","index.js"],"names":["AquariumStore","options","relief","reliefHeight","ob","observable","waterCount","configurationIsValid","waterCubesArray","this","setRelief","initialRelief","toString","length","Math","max","inputIsValid","test","runInAction","newRelief","match","map","digits","parseInt","makeWaterCubesArray","indexesByHeight","forEach","value","index","undefined","push","array","sort","a","b","heightsList","Object","keys","key","sortNumerically","reverse","terrainArray","Array","fill","makeIndexesByHeight","makeSortedHeightsList","overallWater","peaksToMix","i","height","heightIndexes","concat","lastHeightIndex","x","currentWater","ReliefInput","observer","aquariumStore","useContext","AquariumContext","reliefInputRef","useRef","rightBlock","getConfigurationIsValid","className","getWaterCount","type","ref","onChange","valueToSet","current","defaultValue","SquaresGraph","widthPx","heightPx","cellSize","canvasRef","useEffect","redrawCanvas","context","getContext","colors","clearRect","fillStyle","border","fillRect","xArray","xIndex","currentTerrainType","cubesCount","airCount","y","base","window","addEventListener","removeEventListener","width","SquaresContainer","containerRef","useState","setCellSize","wrapperWidth","setWrapperWidth","wrapperHeight","setWrapperHeight","getWaterCubesArray","resizeDimensions","xSize","ySize","parentWidthPx","parentHeightPx","possibleCellX","floor","possibleCellY","min","canvasSizeCalc","getWidth","getHeight","clientWidth","clientHeight","canvasWidth","canvasHeight","createContext","Aquarium","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f95b3ada.chunk.js","sourcesContent":["import { runInAction, observable } from \"mobx\";\r\n\r\ntype IndexesByHeight = {[key: number]: number[]};\r\n\r\ninterface AquariumStoreOptions {\r\n  initialRelief: number[];\r\n}\r\n\r\ninterface AquariumObservable {\r\n  waterCount: number;\r\n  configurationIsValid: boolean;\r\n  waterCubesArray: number[][];\r\n}\r\n\r\nexport class AquariumStore {\r\n  private relief: number[] = [];\r\n  private reliefHeight: number | null = null;\r\n  private ob: AquariumObservable = observable({\r\n    waterCount: 0,\r\n    configurationIsValid: false,\r\n    waterCubesArray: [],\r\n  });\r\n\r\n  constructor(options: AquariumStoreOptions) {\r\n    this.setRelief(`[${options.initialRelief.toString()}]`);\r\n  }\r\n\r\n  getRelief(): number[] {\r\n    return this.relief;\r\n  }\r\n\r\n  getWidth(): number {\r\n    return this.relief.length;\r\n  }\r\n\r\n  getHeight(): number {\r\n    if (this.reliefHeight === null) {\r\n      this.reliefHeight = Math.max(...this.relief);\r\n    }\r\n    return this.reliefHeight;\r\n  }\r\n\r\n  setRelief(relief: string): void {\r\n    const inputIsValid = /^\\[ *(\\d+( *, *\\d+)*) *\\]$/.test(relief);\r\n    runInAction(() => {\r\n      this.ob.configurationIsValid = inputIsValid;\r\n    });\r\n    if (!inputIsValid) {\r\n      return;\r\n    }\r\n    const newRelief = relief.match(/\\d+/g);\r\n    if (newRelief === null) {\r\n      return;\r\n    }\r\n    this.relief = newRelief.map((digits) => parseInt(digits));\r\n    this.reliefHeight = null;\r\n\r\n    this.makeWaterCubesArray();\r\n  }\r\n\r\n  makeIndexesByHeight(): IndexesByHeight {\r\n    const indexesByHeight: IndexesByHeight = {};\r\n    this.relief.forEach((value, index) => {\r\n      if (indexesByHeight[value] === undefined) {\r\n        indexesByHeight[value] = [];\r\n      }\r\n      indexesByHeight[value].push(index);\r\n    });\r\n    return indexesByHeight;\r\n  }\r\n\r\n  sortNumerically(array: any[]) {\r\n    array.sort((a, b) => {\r\n      if (a > b) {\r\n        return 1;\r\n      }\r\n      return (a < b) ? -1 : 0;\r\n    });\r\n  }\r\n\r\n  makeSortedHeightsList(indexesByHeight: IndexesByHeight): number[] {\r\n    let heightsList = Object.keys(indexesByHeight).map((key) => parseInt(key));\r\n    this.sortNumerically(heightsList)\r\n    heightsList = heightsList.reverse();\r\n    return heightsList;\r\n  }\r\n\r\n  makeWaterCubesArray(): void {\r\n    let terrainArray: number[][] = Array(this.relief.length).fill(null);\r\n    const indexesByHeight = this.makeIndexesByHeight();\r\n    const heightsList = this.makeSortedHeightsList(indexesByHeight);\r\n    let overallWater = 0;\r\n\r\n    let peaksToMix: number[] = [];\r\n\r\n    // find matching peaks\r\n    for (let i = 0; i < heightsList.length; i++) {\r\n      const height = heightsList[i];\r\n      if (!height) {\r\n        indexesByHeight[0].forEach((index) => {\r\n          if (terrainArray[index] === null) {\r\n            terrainArray[index] = [0, 0];\r\n          }\r\n        });\r\n        break;\r\n      }\r\n\r\n      let heightIndexes = indexesByHeight[height];\r\n      if (peaksToMix.length) {\r\n        heightIndexes = heightIndexes.concat(peaksToMix);\r\n      }\r\n\r\n      // if no peaks matched, search for lower peaks\r\n      if (heightIndexes.length < 2 && height > 1) {\r\n        peaksToMix = heightIndexes;\r\n\r\n        if (terrainArray[heightIndexes[0]] === null) {\r\n          terrainArray[heightIndexes[0]] = [0, height];\r\n        }\r\n        continue;\r\n      }\r\n\r\n      this.sortNumerically(heightIndexes);\r\n      const lastHeightIndex = heightIndexes[heightIndexes.length - 1];\r\n\r\n      for (let x = heightIndexes[0]; x <= lastHeightIndex; x++) {\r\n        if (terrainArray[x] !== null) {\r\n          continue;\r\n        }\r\n        const currentWater = height - this.relief[x];\r\n        overallWater += currentWater;\r\n\r\n        terrainArray[x] = [\r\n          currentWater,\r\n          this.relief[x]\r\n        ];\r\n      }\r\n\r\n      // if we matched higher peaks with lower ones, we should also check only lower peaks\r\n      if (peaksToMix.length) {\r\n        peaksToMix = [];\r\n        i--;\r\n      } else {\r\n        peaksToMix = [heightIndexes[0]];\r\n      }\r\n    }\r\n\r\n    runInAction(() => {\r\n      this.ob.waterCount = overallWater;\r\n      this.ob.waterCubesArray = terrainArray;\r\n    });\r\n  }\r\n\r\n  getWaterCubesArray() {\r\n    return this.ob.waterCubesArray;\r\n  }\r\n\r\n  getWaterCount(): number {\r\n    return this.ob.waterCount;\r\n  }\r\n\r\n  getConfigurationIsValid(): boolean {\r\n    return this.ob.configurationIsValid;\r\n  }\r\n}","import React, { FC, useContext, useRef } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { AquariumContext } from '../aquarium/aquarium';\r\nimport './relief-input.scss';\r\n\r\nexport interface ReliefInputProps {\r\n  initialRelief: number[];\r\n}\r\n\r\nexport const ReliefInput: FC<ReliefInputProps> = observer(({ initialRelief }) => {\r\n  const aquariumStore = useContext(AquariumContext);\r\n\r\n  const reliefInputRef = useRef<HTMLInputElement>(null);\r\n  const handleChange = () => {\r\n    const valueToSet = reliefInputRef.current?.value;\r\n    if (valueToSet !== undefined) {\r\n      aquariumStore.setRelief(valueToSet);\r\n    }\r\n  }\r\n\r\n  const rightBlock = (aquariumStore.getConfigurationIsValid())\r\n    ? (\r\n      <span className=\"relief-input-water-label relief-right-most-label\">\r\n        has water volume {aquariumStore.getWaterCount()}\r\n      </span>\r\n    )\r\n    : (\r\n      <span className=\"relief-input-wrong-config relief-right-most-label\">\r\n        is invalid\r\n      </span>\r\n    );\r\n\r\n  return (\r\n    <div className=\"relief-input-panel\">\r\n      <div className=\"relief-input-wrapper\">\r\n        <span className=\"relief-input-config-label\">\r\n          Configuration\r\n        </span>\r\n        <input\r\n          className=\"relief-input\"\r\n          type=\"text\"\r\n          ref={reliefInputRef}\r\n          onChange={handleChange}\r\n          defaultValue={`[${initialRelief.toString()}]`}\r\n        />\r\n        {rightBlock}\r\n      </div>\r\n    </div>\r\n  );\r\n});","import React, { FC, useEffect, useRef } from 'react';\r\n\r\nexport interface SquaresGraphProps {\r\n  height: number;\r\n  widthPx: number;\r\n  heightPx: number;\r\n  cellSize: number;\r\n  waterCubesArray: number[][];\r\n}\r\n\r\nexport const SquaresGraph: FC<SquaresGraphProps> = ({\r\n  height,\r\n  widthPx,\r\n  heightPx,\r\n  cellSize,\r\n  waterCubesArray,\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const redrawCanvas = () => {\r\n      if (canvasRef.current !== null) {\r\n        const context = canvasRef.current.getContext(\"2d\");\r\n        if (context !== null) {\r\n          const colors = {\r\n            \"base\": \"#666\",\r\n            \"border\": \"#999\",\r\n            \"air\": \"#fff\",\r\n            \"cube\": \"#fd7\",\r\n            \"water\": \"#aaf\",\r\n          }\r\n          const borderWidth = 1;\r\n\r\n          context.clearRect(0, 0, widthPx, heightPx);\r\n\r\n          context.fillStyle = colors.border;\r\n          context.fillRect(0, 0, widthPx, heightPx);\r\n\r\n          waterCubesArray.forEach((xArray, xIndex) => {\r\n\r\n            const waterCount = xArray[0];\r\n            const cubesCount = xArray[1];\r\n            const airCount = height - waterCount - cubesCount;\r\n\r\n            let currentTerrainType: 'air' | 'water' | 'cube';\r\n            for (let y = 0; y < height; y++) {\r\n              if (y + 1 > airCount + waterCount) {\r\n                currentTerrainType = 'cube';\r\n              } else {\r\n                currentTerrainType = (y + 1 > airCount)\r\n                  ? 'water'\r\n                  : 'air';\r\n              }\r\n\r\n              context.fillStyle = colors[currentTerrainType];\r\n              context.fillRect(\r\n                borderWidth + xIndex * (borderWidth + cellSize),\r\n                borderWidth + y * (borderWidth + cellSize),\r\n                cellSize,\r\n                cellSize,\r\n              );\r\n            }\r\n\r\n            context.fillStyle = colors.base;\r\n            context.fillRect(\r\n              borderWidth + xIndex * (borderWidth + cellSize),\r\n              borderWidth + height * (borderWidth + cellSize),\r\n              cellSize,\r\n              cellSize,\r\n            );\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    redrawCanvas();\r\n\r\n    window.addEventListener(\"resize\", redrawCanvas);\r\n\r\n    return () => window.removeEventListener(\"resize\", redrawCanvas);\r\n  }, [cellSize, height, widthPx, heightPx, waterCubesArray]);\r\n\r\n  return (\r\n    <canvas className=\"squares-graph\" width={widthPx} height={heightPx} ref={canvasRef}></canvas>\r\n  );\r\n}","import React, { useContext, useRef, useEffect, useState } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { AquariumContext } from '../aquarium/aquarium';\r\nimport { SquaresGraph } from '../squares-graph/squares-graph';\r\nimport './squares-container.scss';\r\nimport { canvasSizeCalc } from '../utils/canvas-size-calc';\r\n\r\nexport const SquaresContainer = observer(() => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [cellSize, setCellSize] = useState(0);\r\n  const [wrapperWidth, setWrapperWidth] = useState(0);\r\n  const [wrapperHeight, setWrapperHeight] = useState(0);\r\n\r\n  const aquariumStore = useContext(AquariumContext);\r\n  const waterCubesArray = aquariumStore.getWaterCubesArray();\r\n\r\n  useEffect(() => {\r\n    const resizeDimensions = () => {\r\n      if (containerRef.current !== null) {\r\n        const [ cellSize, canvasWidth, canvasHeight ] = canvasSizeCalc(\r\n          aquariumStore.getWidth(),\r\n          aquariumStore.getHeight(),\r\n          containerRef.current.clientWidth,\r\n          containerRef.current.clientHeight,\r\n        );\r\n\r\n        setCellSize(cellSize);\r\n        setWrapperWidth(canvasWidth);\r\n        setWrapperHeight(canvasHeight);\r\n      }\r\n    }\r\n\r\n    resizeDimensions();\r\n\r\n    window.addEventListener(\"resize\", resizeDimensions);\r\n\r\n    return () => window.removeEventListener(\"resize\", resizeDimensions);\r\n    // eslint-disable-next-line\r\n  }, [waterCubesArray]);\r\n\r\n  return (\r\n    <div ref={containerRef} className=\"squares-container\">\r\n      <SquaresGraph\r\n        widthPx={wrapperWidth}\r\n        heightPx={wrapperHeight}\r\n        height={aquariumStore.getHeight()}\r\n        cellSize={cellSize}\r\n        waterCubesArray={waterCubesArray}\r\n      />\r\n    </div>\r\n  );\r\n});","export const canvasSizeCalc = (\r\n  xSize: number,\r\n  ySize: number,\r\n  parentWidthPx: number,\r\n  parentHeightPx: number\r\n) => {  \r\n  const minCellSize = 2;\r\n  const maxCellSize = 30;\r\n  const borderWidth = 1;\r\n\r\n  const possibleCellX = Math.floor((parentWidthPx - 20) / xSize);\r\n  const possibleCellY = Math.floor((parentHeightPx - 20) / (ySize + 1));\r\n  let cellSize = Math.min(possibleCellX, possibleCellY);\r\n  cellSize -= borderWidth;\r\n\r\n  if (cellSize < minCellSize) {\r\n    cellSize = minCellSize;\r\n  }\r\n  if (cellSize > maxCellSize) {\r\n    cellSize = maxCellSize;\r\n  }\r\n\r\n  const canvasWidth = xSize * cellSize + xSize * borderWidth + borderWidth;\r\n  const canvasHeight = (ySize + 1) * cellSize + (ySize + 1) * borderWidth + borderWidth;\r\n\r\n  return [\r\n    cellSize,\r\n    canvasWidth,\r\n    canvasHeight,\r\n  ];\r\n};\r\n","import React, { createContext } from 'react';\r\nimport { AquariumStore } from '../../mobx/aquarium-store';\r\nimport { ReliefInput } from '../relief-input/relief-input';\r\nimport { SquaresContainer } from '../squares-container/squares-container';\r\nimport '../../_common.scss';\r\nimport './aquarium.scss';\r\n\r\nconst initialRelief = [18,29,22,46,42,33,30,49,3,18,20,13,7,19,35,23,29,45,36,1,4,36,11,16,4,47,39,26,12,4,2,36,13,0,17,29,15,24,38,4,20,28,15,43,14,42,45,50,31,47,33,46,6,32,47,25,33,9,39,35,0,41,24,34];\r\n\r\nconst aquariumStore = new AquariumStore({\r\n  initialRelief,\r\n});\r\n\r\nexport const AquariumContext = createContext(aquariumStore);\r\n\r\nexport const Aquarium = () => {\r\n  return (\r\n    <AquariumContext.Provider value={aquariumStore}>\r\n      <div className=\"aquarium-wrapper\">\r\n        <ReliefInput initialRelief={initialRelief} />\r\n        <SquaresContainer />\r\n      </div>\r\n    </AquariumContext.Provider>\r\n  )\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Aquarium } from './components/aquarium/aquarium';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Aquarium />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}